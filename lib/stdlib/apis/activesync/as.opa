/*
     Copyright Â© 2011-2013 MLstate
 
     This file is part of Opa.
 
     Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 
     The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
// WARNING: This file has been generated by apigen.opa, DO NOT EDIT.
// Config file: as.apigen
// Module name: AS
// Endianness: be
// OAuth: false
// Style: JS-like
import stdlib.core
import stdlib.core.wbxml
import stdlib.io.socket
import stdlib.apis.common
import stdlib.apis.apigenlib
import stdlib.apis.activesync // Remove for compiler
ALX = ApigenLibXml
type AS.SPDT = {
  string ServerId,
  string ParentId,
  string DisplayName,
  int Type
}

type AS.FolderSyncChanges = {list(AS.FolderSyncChange) Changes}

type AS.AirSyncBase_Body = {
  int Type,
  int EstimatedDataSize,
  int Truncated,
  string Data
}

type AS.Category = {string Category}

type AS.CommandsAdd = {
  string ServerId,
  list(AS.Data) Data,
  string Class
}

type AS.CommandsDelete = {
  string ServerId,
  string Class
}

type AS.CommandsChange = {
  string ServerId,
  list(AS.Data) Data,
  string Class
}

type AS.Commands = {list(AS.SyncCommands) Commands}

type AS.ServerId = {string ServerId}

type AS.FolderSyncChange = 
     {int Count}
  or {AS.SPDT Add}
  or {AS.SPDT Update}
  or {AS.ServerId Delete}

type AS.Flag = 
     {string Subject}
  or {string Status}
  or {string FlagType}
  or {string DateCompleted}
  or {string CompleteTime}
  or {string StartDate}
  or {string DueDate}
  or {string UtcStartDate}
  or {string UtcDueDate}
  or {string ReminderSet}
  or {string ReminderTime}
  or {string OrdinalDate}
  or {string SubOrdinalDate}

type AS.Data = 
     {string To}
  or {string From}
  or {string Subject}
  or {string DateReceived}
  or {string DisplayTo}
  or {string ThreadTopic}
  or {int Importance}
  or {int Read}
  or {AS.AirSyncBase_Body Body}
  or {string MessageClass}
  or {string InternetCPID}
  or {list(AS.Flag) Flag}
  or {string ContentClass}
  or {int NativeBodyType}
  or {binary ConversationId}
  or {binary ConversationIndex}
  or {list(AS.Category) Categories}

type AS.SyncCommands = 
     {AS.CommandsAdd Add}
  or {AS.CommandsDelete Delete}
  or {AS.CommandsChange Change}

type AS.Class = 
     { Tasks}
  or { Email}
  or { Calendar}
  or { Contacts}
  or { SMS}
  or { Notes}

type AS.zero_or_one = 
     { zero}
  or { one}

type AS.filter_type = 
     { no_filter}
  or { one_day}
  or { three_days}
  or { one_week}
  or { two_weeks}
  or { one_month}
  or { three_months}
  or { six_months}
  or { incomplete_tasks}

type AS.FolderCreateType = 
     { generic}
  or { mail}
  or { calendar}
  or { contacts}
  or { tasks}
  or { journal}
  or { notes}

type AS.getitemestimate_options = {
  string User,
  string DeviceType,
  string DeviceId,
  string Cmd
}

type AS.sync_options = {
  string User,
  string DeviceType,
  string DeviceId,
  string Cmd
}

type AS.sendmail_options = {
  string User,
  string DeviceType,
  string DeviceId,
  string Cmd
}

type AS.provision_with_key_options = {
  string User,
  string DeviceType,
  string DeviceId,
  string Cmd
}

type AS.provision_options = {
  string User,
  string DeviceType,
  string DeviceId,
  string Cmd
}

type AS.folderdelete_options = {
  string User,
  string DeviceType,
  string DeviceId,
  string Cmd
}

type AS.foldercreate_options = {
  string User,
  string DeviceType,
  string DeviceId,
  string Cmd
}

type AS.foldersync_options = {
  string User,
  string DeviceType,
  string DeviceId,
  string Cmd
}

type AS.autodiscover_options = {}

type AS.BodyPreference = {
  option(int) preview,
  option(int) truncationsize,
  option(int) allornone,
  int typ
}
type AS.Options = {
  option(AS.BodyPreference) bodypartpreference,
  option(AS.BodyPreference) bodypreference,
  option(AS.Class) class,
  option(AS.zero_or_one) conflict,
  option(AS.filter_type) filter_type
}
module AS {

  AS.getitemestimate_options getitemestimate_default = {User:"", DeviceType:"", DeviceId:"", Cmd:""}
  AS.sync_options sync_default = {User:"", DeviceType:"", DeviceId:"", Cmd:""}
  AS.sendmail_options sendmail_default = {User:"", DeviceType:"", DeviceId:"", Cmd:""}
  AS.provision_with_key_options provision_with_key_default = {User:"", DeviceType:"", DeviceId:"", Cmd:""}
  AS.provision_options provision_default = {User:"", DeviceType:"", DeviceId:"", Cmd:""}
  AS.folderdelete_options folderdelete_default = {User:"", DeviceType:"", DeviceId:"", Cmd:""}
  AS.foldercreate_options foldercreate_default = {User:"", DeviceType:"", DeviceId:"", Cmd:""}
  AS.foldersync_options foldersync_default = {User:"", DeviceType:"", DeviceId:"", Cmd:""}
  AS.BodyPreference BodyPreference_default = {preview:none, truncationsize:none, allornone:none, typ:0}
  AS.Options Options_default = {bodypartpreference:none, bodypreference:none, class:none, conflict:none, filter_type:none}
  function getitemestimate_options(AS.getitemestimate_options options) {
    ApigenLib.params([{sreq:("User",options.User)},{sreq:("DeviceType",options.DeviceType)},{sreq:("DeviceId",options.DeviceId)},{sreq:("Cmd",options.Cmd)}])
  }

  function sync_options(AS.sync_options options) {
    ApigenLib.params([{sreq:("User",options.User)},{sreq:("DeviceType",options.DeviceType)},{sreq:("DeviceId",options.DeviceId)},{sreq:("Cmd",options.Cmd)}])
  }

  function sendmail_options(AS.sendmail_options options) {
    ApigenLib.params([{sreq:("User",options.User)},{sreq:("DeviceType",options.DeviceType)},{sreq:("DeviceId",options.DeviceId)},{sreq:("Cmd",options.Cmd)}])
  }

  function provision_with_key_options(AS.provision_with_key_options options) {
    ApigenLib.params([{sreq:("User",options.User)},{sreq:("DeviceType",options.DeviceType)},{sreq:("DeviceId",options.DeviceId)},{sreq:("Cmd",options.Cmd)}])
  }

  function provision_options(AS.provision_options options) {
    ApigenLib.params([{sreq:("User",options.User)},{sreq:("DeviceType",options.DeviceType)},{sreq:("DeviceId",options.DeviceId)},{sreq:("Cmd",options.Cmd)}])
  }

  function folderdelete_options(AS.folderdelete_options options) {
    ApigenLib.params([{sreq:("User",options.User)},{sreq:("DeviceType",options.DeviceType)},{sreq:("DeviceId",options.DeviceId)},{sreq:("Cmd",options.Cmd)}])
  }

  function foldercreate_options(AS.foldercreate_options options) {
    ApigenLib.params([{sreq:("User",options.User)},{sreq:("DeviceType",options.DeviceType)},{sreq:("DeviceId",options.DeviceId)},{sreq:("Cmd",options.Cmd)}])
  }

  function foldersync_options(AS.foldersync_options options) {
    ApigenLib.params([{sreq:("User",options.User)},{sreq:("DeviceType",options.DeviceType)},{sreq:("DeviceId",options.DeviceId)},{sreq:("Cmd",options.Cmd)}])
  }

  gettag_SPDT = ALX.get_rec(_,{ServerId:"", ParentId:"", DisplayName:"", Type:0},function (tag,r,content) {match (tag) {
 case "ServerId": ALX.dorec(r,ALX.gettag_string,function (AS.SPDT r,string ServerId) {~{r with ServerId}},content)
 case "ParentId": ALX.dorec(r,ALX.gettag_string,function (AS.SPDT r,string ParentId) {~{r with ParentId}},content)
 case "DisplayName": ALX.dorec(r,ALX.gettag_string,function (AS.SPDT r,string DisplayName) {~{r with DisplayName}},content)
 case "Type": ALX.dorec(r,ALX.gettag_int,function (AS.SPDT r,int Type) {~{r with Type}},content)
 case _: none
 }})
  gettag_FolderSyncChanges = ALX.get_rec(_,{Changes:[]},function (tag,r,content) {match (tag) {
 case "Changes":
     ALX.dorec(r,ApigenLibXml.get_list(_,gettag_FolderSyncChange),
     function (AS.FolderSyncChanges r,list(AS.FolderSyncChange) Changes) {~{r with Changes}},content)
 case _: none
 }})
  gettag_AirSyncBase_Body = ALX.get_rec(_,{Type:0, EstimatedDataSize:0, Truncated:0, Data:""},function (tag,r,content) {match (tag) {
 case "Type": ALX.dorec(r,ALX.gettag_int,function (AS.AirSyncBase_Body r,int Type) {~{r with Type}},content)
 case "EstimatedDataSize":
     ALX.dorec(r,ALX.gettag_int,function (AS.AirSyncBase_Body r,int EstimatedDataSize) {~{r with EstimatedDataSize}},content)
 case "Truncated": ALX.dorec(r,ALX.gettag_int,function (AS.AirSyncBase_Body r,int Truncated) {~{r with Truncated}},content)
 case "Data": ALX.dorec(r,ALX.gettag_string,function (AS.AirSyncBase_Body r,string Data) {~{r with Data}},content)
 case _: none
 }})
  gettag_Category = ALX.get_rec(_,{Category:""},function (tag,r,content) {match (tag) {
 case "Category": ALX.dorec(r,ALX.gettag_string,function (AS.Category r,string Category) {~{r with Category}},content)
 case _: none
 }})
  gettag_CommandsAdd = ALX.get_rec(_,{ServerId:"", Data:[], Class:""},function (tag,r,content) {match (tag) {
 case "ServerId": ALX.dorec(r,ALX.gettag_string,function (AS.CommandsAdd r,string ServerId) {~{r with ServerId}},content)
 case "Data": ALX.dorec(r,ApigenLibXml.get_list(_,gettag_Data),function (AS.CommandsAdd r,list(AS.Data) Data) {~{r with Data}},content)
 case "Class": ALX.dorec(r,ALX.gettag_string,function (AS.CommandsAdd r,string Class) {~{r with Class}},content)
 case _: none
 }})
  gettag_CommandsDelete = ALX.get_rec(_,{ServerId:"", Class:""},function (tag,r,content) {match (tag) {
 case "ServerId": ALX.dorec(r,ALX.gettag_string,function (AS.CommandsDelete r,string ServerId) {~{r with ServerId}},content)
 case "Class": ALX.dorec(r,ALX.gettag_string,function (AS.CommandsDelete r,string Class) {~{r with Class}},content)
 case _: none
 }})
  gettag_CommandsChange = ALX.get_rec(_,{ServerId:"", Data:[], Class:""},function (tag,r,content) {match (tag) {
 case "ServerId": ALX.dorec(r,ALX.gettag_string,function (AS.CommandsChange r,string ServerId) {~{r with ServerId}},content)
 case "Data":
     ALX.dorec(r,ApigenLibXml.get_list(_,gettag_Data),function (AS.CommandsChange r,list(AS.Data) Data) {~{r with Data}},content)
 case "Class": ALX.dorec(r,ALX.gettag_string,function (AS.CommandsChange r,string Class) {~{r with Class}},content)
 case _: none
 }})
  gettag_Commands = ALX.get_rec(_,{Commands:[]},function (tag,r,content) {match (tag) {
 case "Commands":
     ALX.dorec(r,ApigenLibXml.get_list(_,gettag_SyncCommands),function (AS.Commands r,list(AS.SyncCommands) Commands) {~{r with Commands}},content)
 case _: none
 }})
  gettag_ServerId = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "ServerId": ALX.doalt(ALX.gettag_string,function (string ServerId) {{~ServerId}},content)
 case _: none
 }})
  gettag_FolderSyncChange = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "Count": ALX.doalt(ALX.gettag_int,function (int Count) {{~Count}},content)
 case "Add": ALX.doalt(gettag_SPDT,function (AS.SPDT Add) {{~Add}},content)
 case "Update": ALX.doalt(gettag_SPDT,function (AS.SPDT Update) {{~Update}},content)
 case "Delete": ALX.doalt(gettag_ServerId,function (AS.ServerId Delete) {{~Delete}},content)
 case _: none
 }})
  gettag_Flag = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "Subject": ALX.doalt(ALX.gettag_string,function (string Subject) {{~Subject}},content)
 case "Status": ALX.doalt(ALX.gettag_string,function (string Status) {{~Status}},content)
 case "FlagType": ALX.doalt(ALX.gettag_string,function (string FlagType) {{~FlagType}},content)
 case "DateCompleted": ALX.doalt(ALX.gettag_string,function (string DateCompleted) {{~DateCompleted}},content)
 case "CompleteTime": ALX.doalt(ALX.gettag_string,function (string CompleteTime) {{~CompleteTime}},content)
 case "StartDate": ALX.doalt(ALX.gettag_string,function (string StartDate) {{~StartDate}},content)
 case "DueDate": ALX.doalt(ALX.gettag_string,function (string DueDate) {{~DueDate}},content)
 case "UtcStartDate": ALX.doalt(ALX.gettag_string,function (string UtcStartDate) {{~UtcStartDate}},content)
 case "UtcDueDate": ALX.doalt(ALX.gettag_string,function (string UtcDueDate) {{~UtcDueDate}},content)
 case "ReminderSet": ALX.doalt(ALX.gettag_string,function (string ReminderSet) {{~ReminderSet}},content)
 case "ReminderTime": ALX.doalt(ALX.gettag_string,function (string ReminderTime) {{~ReminderTime}},content)
 case "OrdinalDate": ALX.doalt(ALX.gettag_string,function (string OrdinalDate) {{~OrdinalDate}},content)
 case "SubOrdinalDate": ALX.doalt(ALX.gettag_string,function (string SubOrdinalDate) {{~SubOrdinalDate}},content)
 case _: none
 }})
  gettag_Data = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "To": ALX.doalt(ALX.gettag_string,function (string To) {{~To}},content)
 case "From": ALX.doalt(ALX.gettag_string,function (string From) {{~From}},content)
 case "Subject": ALX.doalt(ALX.gettag_string,function (string Subject) {{~Subject}},content)
 case "DateReceived": ALX.doalt(ALX.gettag_string,function (string DateReceived) {{~DateReceived}},content)
 case "DisplayTo": ALX.doalt(ALX.gettag_string,function (string DisplayTo) {{~DisplayTo}},content)
 case "ThreadTopic": ALX.doalt(ALX.gettag_string,function (string ThreadTopic) {{~ThreadTopic}},content)
 case "Importance": ALX.doalt(ALX.gettag_int,function (int Importance) {{~Importance}},content)
 case "Read": ALX.doalt(ALX.gettag_int,function (int Read) {{~Read}},content)
 case "Body": ALX.doalt(gettag_AirSyncBase_Body,function (AS.AirSyncBase_Body Body) {{~Body}},content)
 case "MessageClass": ALX.doalt(ALX.gettag_string,function (string MessageClass) {{~MessageClass}},content)
 case "InternetCPID": ALX.doalt(ALX.gettag_string,function (string InternetCPID) {{~InternetCPID}},content)
 case "Flag": ALX.doalt(ApigenLibXml.get_list(_,gettag_Flag),function (list(AS.Flag) Flag) {{~Flag}},content)
 case "ContentClass": ALX.doalt(ALX.gettag_string,function (string ContentClass) {{~ContentClass}},content)
 case "NativeBodyType": ALX.doalt(ALX.gettag_int,function (int NativeBodyType) {{~NativeBodyType}},content)
 case "ConversationId": ALX.doalt(ALX.gettag_binary,function (binary ConversationId) {{~ConversationId}},content)
 case "ConversationIndex": ALX.doalt(ALX.gettag_binary,function (binary ConversationIndex) {{~ConversationIndex}},content)
 case "Categories": ALX.doalt(ApigenLibXml.get_list(_,gettag_Category),function (list(AS.Category) Categories) {{~Categories}},content)
 case _: none
 }})
  gettag_SyncCommands = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "Add": ALX.doalt(gettag_CommandsAdd,function (AS.CommandsAdd Add) {{~Add}},content)
 case "Delete": ALX.doalt(gettag_CommandsDelete,function (AS.CommandsDelete Delete) {{~Delete}},content)
 case "Change": ALX.doalt(gettag_CommandsChange,function (AS.CommandsChange Change) {{~Change}},content)
 case _: none
 }})
  gettag_Class = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "Tasks": ALX.doalt(ALX.gettag_label,function ( Tasks) {{~Tasks}},content)
 case "Email": ALX.doalt(ALX.gettag_label,function ( Email) {{~Email}},content)
 case "Calendar": ALX.doalt(ALX.gettag_label,function ( Calendar) {{~Calendar}},content)
 case "Contacts": ALX.doalt(ALX.gettag_label,function ( Contacts) {{~Contacts}},content)
 case "SMS": ALX.doalt(ALX.gettag_label,function ( SMS) {{~SMS}},content)
 case "Notes": ALX.doalt(ALX.gettag_label,function ( Notes) {{~Notes}},content)
 case _: none
 }})
  gettag_zero_or_one = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "0": ALX.doalt(ALX.gettag_label,function ( zero) {{~zero}},content)
 case "1": ALX.doalt(ALX.gettag_label,function ( one) {{~one}},content)
 case _: none
 }})
  gettag_filter_type = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "0": ALX.doalt(ALX.gettag_label,function ( no_filter) {{~no_filter}},content)
 case "1": ALX.doalt(ALX.gettag_label,function ( one_day) {{~one_day}},content)
 case "2": ALX.doalt(ALX.gettag_label,function ( three_days) {{~three_days}},content)
 case "3": ALX.doalt(ALX.gettag_label,function ( one_week) {{~one_week}},content)
 case "4": ALX.doalt(ALX.gettag_label,function ( two_weeks) {{~two_weeks}},content)
 case "5": ALX.doalt(ALX.gettag_label,function ( one_month) {{~one_month}},content)
 case "6": ALX.doalt(ALX.gettag_label,function ( three_months) {{~three_months}},content)
 case "7": ALX.doalt(ALX.gettag_label,function ( six_months) {{~six_months}},content)
 case "8": ALX.doalt(ALX.gettag_label,function ( incomplete_tasks) {{~incomplete_tasks}},content)
 case _: none
 }})
  gettag_FolderCreateType = ALX.get_alt(_,function (tag,content) {match (tag) {
 case "1": ALX.doalt(ALX.gettag_label,function ( generic) {{~generic}},content)
 case "12": ALX.doalt(ALX.gettag_label,function ( mail) {{~mail}},content)
 case "13": ALX.doalt(ALX.gettag_label,function ( calendar) {{~calendar}},content)
 case "14": ALX.doalt(ALX.gettag_label,function ( contacts) {{~contacts}},content)
 case "15": ALX.doalt(ALX.gettag_label,function ( tasks) {{~tasks}},content)
 case "16": ALX.doalt(ALX.gettag_label,function ( journal) {{~journal}},content)
 case "17": ALX.doalt(ALX.gettag_label,function ( notes) {{~notes}},content)
 case _: none
 }})
  
  function xmlns xmlns_GetItemEstimate(string collection_id,string synckey) {
    xmlns @unsafe_cast(
<GetItemEstimate xmlns="GetItemEstimate" xmlns:airsync="AirSync"><Collections><Collection><airsync:SyncKey>{synckey}</airsync:SyncKey><CollectionId>{collection_id}</CollectionId><airsync:Options><airsync:FilterType>0</airsync:FilterType><airsync:Class>Email</airsync:Class></airsync:Options></Collection></Collections></GetItemEstimate>
)
  }

  function outcome(string,string) pack_GetItemEstimate(string collection_id,string synckey) {
    msg = xmlns_GetItemEstimate(collection_id,synckey)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,336))
  }

  
  function xmlns xmlns_Sync(option(AS.Options) syncoptions,option(int) deletesasmoves,bool getchanges,string collection_id,string synckey) {
    xmlns @unsafe_cast(
<Sync xmlns="AirSync"><Collections><Collection><SyncKey>{synckey}</SyncKey><CollectionId>{collection_id}</CollectionId>{match (deletesasmoves) { case {some:deletesasmoves}: ALX.make_simple_sequence("",[("DeletesAsMoves",{Int:deletesasmoves})]); case {none}: ALX.xmlnsl0(); }}{ALX.make_simple_sequence("",if (getchanges) [("GetChanges",{Empty})] else [])}{match (syncoptions) { case {some:syncoptions}: match (syncoptions) { case ~{bodypartpreference,bodypreference,class,conflict,filter_type}: ALX.xmlnsl(xmlns_Options(bodypartpreference,bodypreference,class,conflict,filter_type)); }; case {none}: ALX.xmlnsl0(); }}</Collection></Collections></Sync>
)
  }

  function outcome(string,string) pack_Sync(option(AS.Options) syncoptions,option(int) deletesasmoves,bool getchanges,string collection_id,string synckey) {
    msg = xmlns_Sync(syncoptions,deletesasmoves,getchanges,collection_id,synckey)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,650))
  }

  
  function xmlns xmlns_SendMail(string mime,bool save_in_sent_items,option(string) account_id,string client_id) {
    xmlns @unsafe_cast(
<SendMail xmlns="ComposeMail"><ClientId>{client_id}</ClientId>{match (account_id) { case {some:account_id}: ALX.make_simple_sequence("",[("AccountId",{String:account_id})]); case {none}: ALX.xmlnsl0(); }}{ALX.make_simple_sequence("",if (save_in_sent_items) [("SaveInSentItems",{Empty})] else [])}<Mime><Opaque>{mime}</Opaque></Mime></SendMail>
)
  }

  function outcome(string,string) pack_SendMail(string mime,bool save_in_sent_items,option(string) account_id,string client_id) {
    msg = xmlns_SendMail(mime,save_in_sent_items,account_id,client_id)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,343))
  }

  
  function xmlns xmlns_ProvisionWithKey(int status,string policy_key) {
    xmlns @unsafe_cast(
<Provision xmlns="Provision:"><Policies><Policy><PolicyType>MS-EAS-Provisioning-WBXML</PolicyType><PolicyKey>{policy_key}</PolicyKey><Status>{status}</Status></Policy></Policies></Provision>
)
  }

  function outcome(string,string) pack_ProvisionWithKey(int status,string policy_key) {
    msg = xmlns_ProvisionWithKey(status,policy_key)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,190))
  }

  
  function xmlns xmlns_Provision(ApigenLib.simple_seq params) {
    xmlns @unsafe_cast(
<Provision xmlns="Provision:" xmlns:settings="Settings:"><settings:DeviceInformation><settings:Set>{ApigenLibXml.make_simple_sequence("settings",params)}</settings:Set></settings:DeviceInformation><Policies><Policy><PolicyType>MS-EAS-Provisioning-WBXML</PolicyType></Policy></Policies></Provision>
)
  }

  function outcome(string,string) pack_Provision(ApigenLib.simple_seq params) {
    msg = xmlns_Provision(params)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,297))
  }

  
  function xmlns xmlns_FolderDelete(string serverid,string synckey) {
    xmlns @unsafe_cast(
<FolderDelete xmlns="FolderHierarchy"><SyncKey>{synckey}</SyncKey><ServerId>{serverid}</ServerId></FolderDelete>
)
  }

  function outcome(string,string) pack_FolderDelete(string serverid,string synckey) {
    msg = xmlns_FolderDelete(serverid,synckey)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,112))
  }

  
  function xmlns xmlns_FolderCreate(AS.FolderCreateType typ,string displayname,string parentid,string synckey) {
    xmlns @unsafe_cast(
<FolderCreate xmlns="FolderHierarchy"><SyncKey>{synckey}</SyncKey><ParentId>{parentid}</ParentId><DisplayName>{displayname}</DisplayName>{ALX.make_simple_sequence("",match (typ) { case {generic}: [("Type",{Int:1})]; case {mail}: [("Type",{Int:12})]; case {calendar}: [("Type",{Int:13})]; case {contacts}: [("Type",{Int:14})]; case {tasks}: [("Type",{Int:15})]; case {journal}: [("Type",{Int:16})]; case {notes}: [("Type",{Int:17})] })}</FolderCreate>
)
  }

  function outcome(string,string) pack_FolderCreate(AS.FolderCreateType typ,string displayname,string parentid,string synckey) {
    msg = xmlns_FolderCreate(typ,displayname,parentid,synckey)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,450))
  }

  
  function xmlns xmlns_FolderSync(string synckey) {
    xmlns @unsafe_cast(
<FolderSync xmlns="FolderHierarchy"><SyncKey>{synckey}</SyncKey></FolderSync>
)
  }

  function outcome(string,string) pack_FolderSync(string synckey) {
    msg = xmlns_FolderSync(synckey)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,77))
  }

  
  function xmlns xmlns_Autodiscover(string email) {
    xmlns @unsafe_cast(
<Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006"><Request><EMailAddress>{email}</EMailAddress><AcceptableResponseSchema>http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a</AcceptableResponseSchema></Request></Autodiscover>
)
  }

  function outcome(string,string) pack_Autodiscover(string email) {
    msg = xmlns_Autodiscover(email)
    {success:"<?xml version=\"1.0\"?>\n"^Xmlns.to_string(msg)}
  }

  
  function xmlns xmlns_Options(option(AS.BodyPreference) bodypartpreference,option(AS.BodyPreference) bodypreference,option(AS.Class) class,option(AS.zero_or_one) conflict,option(AS.filter_type) filter_type) {
    xmlns @unsafe_cast(
<Options>{match (filter_type) { case {some:filter_type}: ALX.make_simple_sequence("",match (filter_type) { case {no_filter}: [("FilterType",{Int:0})]; case {one_day}: [("FilterType",{Int:1})]; case {three_days}: [("FilterType",{Int:2})]; case {one_week}: [("FilterType",{Int:3})]; case {two_weeks}: [("FilterType",{Int:4})]; case {one_month}: [("FilterType",{Int:5})]; case {three_months}: [("FilterType",{Int:6})]; case {six_months}: [("FilterType",{Int:7})]; case {incomplete_tasks}: [("FilterType",{Int:8})] }); case {none}: ALX.xmlnsl0(); }}{match (conflict) { case {some:conflict}: ALX.make_simple_sequence("",match (conflict) { case {zero}: [("Conflict",{Int:0})]; case {one}: [("Conflict",{Int:1})] }); case {none}: ALX.xmlnsl0(); }}{match (class) { case {some:class}: ALX.make_simple_sequence("",match (class) { case {Tasks}: [("Class",{String:"Tasks"})]; case {Email}: [("Class",{String:"Email"})]; case {Calendar}: [("Class",{String:"Calendar"})]; case {Contacts}: [("Class",{String:"Contacts"})]; case {SMS}: [("Class",{String:"SMS"})]; case {Notes}: [("Class",{String:"Notes"})] }); case {none}: ALX.xmlnsl0(); }}{match (bodypreference) { case {some:bodypreference}: match (bodypreference) { case ~{preview,truncationsize,allornone,typ}: ALX.xmlnsl(xmlns_BodyPreference(preview,truncationsize,allornone,typ)); }; case {none}: ALX.xmlnsl0(); }}{match (bodypartpreference) { case {some:bodypartpreference}: match (bodypartpreference) { case ~{preview,truncationsize,allornone,typ}: ALX.xmlnsl(xmlns_BodyPreference(preview,truncationsize,allornone,typ)); }; case {none}: ALX.xmlnsl0(); }}</Options>
)
  }

  function outcome(string,string) pack_Options(option(AS.BodyPreference) bodypartpreference,option(AS.BodyPreference) bodypreference,option(AS.Class) class,option(AS.zero_or_one) conflict,option(AS.filter_type) filter_type) {
    msg = xmlns_Options(bodypartpreference,bodypreference,class,conflict,filter_type)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,1607))
  }

  
  function xmlns xmlns_BodyPreference(option(int) preview,option(int) truncationsize,option(int) allornone,int typ) {
    xmlns @unsafe_cast(
<AirSyncBase:BodyPreference><AirSyncBase:Type>{typ}</AirSyncBase:Type>{match (truncationsize) { case {some:truncationsize}: ALX.make_simple_sequence("AirSyncBase",[("TruncationSize",{Int:truncationsize})]); case {none}: ALX.xmlnsl0(); }}{match (allornone) { case {some:allornone}: ALX.make_simple_sequence("AirSyncBase",[("AllOrNone",{Int:allornone})]); case {none}: ALX.xmlnsl0(); }}{match (preview) { case {some:preview}: ALX.make_simple_sequence("AirSyncBase",[("Preview",{Int:preview})]); case {none}: ALX.xmlnsl0(); }}</AirSyncBase:BodyPreference>
)
  }

  function outcome(string,string) pack_BodyPreference(option(int) preview,option(int) truncationsize,option(int) allornone,int typ) {
    msg = xmlns_BodyPreference(preview,truncationsize,allornone,typ)
    Outcome.map_success(function (ctxt) {%%bslBinary.to_encoding%%(ctxt.buf,"binary")})(WBXml.of_xmlns({ActiveSyncDefs.context with debug:1},msg,552))
  }

  function getitemestimate(AS.getitemestimate_options options,string endpoint,ApigenLib.auth auth,list(string) headers,string collection_id,string synckey) {
    path = "/Microsoft-Server-ActiveSync"
    options = getitemestimate_options(options)
    content = pack_GetItemEstimate(collection_id,synckey)
    match (content) {
    case {success:content}:
        ApigenLib.POST_WBXML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }

  function sync(AS.sync_options options,string endpoint,ApigenLib.auth auth,list(string) headers,option(AS.Options) syncoptions,option(int) deletesasmoves,bool getchanges,string collection_id,string synckey) {
    path = "/Microsoft-Server-ActiveSync"
    options = sync_options(options)
    content = pack_Sync(syncoptions,deletesasmoves,getchanges,collection_id,synckey)
    match (content) {
    case {success:content}:
        ApigenLib.POST_WBXML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }

  function sendmail(AS.sendmail_options options,string endpoint,ApigenLib.auth auth,list(string) headers,string mime,bool save_in_sent_items,option(string) account_id,string client_id) {
    path = "/Microsoft-Server-ActiveSync"
    options = sendmail_options(options)
    content = pack_SendMail(mime,save_in_sent_items,account_id,client_id)
    match (content) {
    case {success:content}:
        ApigenLib.POST_WBXML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }

  function provision_with_key(AS.provision_with_key_options options,string endpoint,ApigenLib.auth auth,list(string) headers,int status,string policy_key) {
    path = "/Microsoft-Server-ActiveSync"
    options = provision_with_key_options(options)
    content = pack_ProvisionWithKey(status,policy_key)
    match (content) {
    case {success:content}:
        ApigenLib.POST_WBXML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }

  function provision(AS.provision_options options,string endpoint,ApigenLib.auth auth,list(string) headers,ApigenLib.simple_seq params) {
    path = "/Microsoft-Server-ActiveSync"
    options = provision_options(options)
    content = pack_Provision(params)
    match (content) {
    case {success:content}:
        ApigenLib.POST_WBXML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }

  function folderdelete(AS.folderdelete_options options,string endpoint,ApigenLib.auth auth,list(string) headers,string serverid,string synckey) {
    path = "/Microsoft-Server-ActiveSync"
    options = folderdelete_options(options)
    content = pack_FolderDelete(serverid,synckey)
    match (content) {
    case {success:content}:
        ApigenLib.POST_WBXML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }

  function foldercreate(AS.foldercreate_options options,string endpoint,ApigenLib.auth auth,list(string) headers,AS.FolderCreateType typ,string displayname,string parentid,string synckey) {
    path = "/Microsoft-Server-ActiveSync"
    options = foldercreate_options(options)
    content = pack_FolderCreate(typ,displayname,parentid,synckey)
    match (content) {
    case {success:content}:
        ApigenLib.POST_WBXML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }

  function foldersync(AS.foldersync_options options,string endpoint,ApigenLib.auth auth,list(string) headers,string synckey) {
    path = "/Microsoft-Server-ActiveSync"
    options = foldersync_options(options)
    content = pack_FolderSync(synckey)
    match (content) {
    case {success:content}:
        ApigenLib.POST_WBXML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }

  function autodiscover(string endpoint,ApigenLib.auth auth,list(string) headers,string email) {
    path = "/autodiscover/autodiscover.xml"
    options = []
    content = pack_Autodiscover(email)
    match (content) {
    case {success:content}:
        ApigenLib.POST_XML(endpoint,path,options,auth,headers,content,ApigenLib.build_from_content_type(_,some(ActiveSyncDefs.context)))
    case {~failure}: {failure:{pack:failure}}
    }
  }


}

// End of AS
